{"version":3,"sources":["Components/Home.js","Components/Login.js","Components/Game.js","Components/Menubar.js","Components/Notification.js","Components/NewUserForm.js","Components/Logout.js","Services/login.js","Services/game.js","Services/user.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","Login","props","Row","Col","Form","onSubmit","handleLogin","Group","Label","Control","type","name","value","username","onChange","handleUsernameChange","password","handlePasswordChange","Button","className","variant","Game","user","points","onClick","handleNewGame","gameMsg","clicksToWin","handleGameClick","Menubar","Navbar","collapseOnSelect","expand","bg","Toggle","aira-controls","Collapse","id","Nav","Link","href","as","Notification","message","NewUserForm","handleNewUser","newUsername","handleNewUsernameChange","newPassword","handleNewPasswordChange","Logout","handleLogout","credentials","a","async","axios","post","res","data","config","get","newToken","headers","Authorization","App","useState","setUser","setClicksToWin","setUsername","setPassword","setGameMsg","setMessage","setNewUsername","setNewPassword","useEffect","loggedUserJSON","window","localStorage","getItem","JSON","parse","gameService","token","gameStatus","fetchData","event","preventDefault","loginService","setItem","stringify","setUpNotification","response","updatedPlayer","gameMessage","userService","newUser","target","clear","setTimeout","exact","path","render","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62a279db.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>Welcome to Lucky Click!</h1>\r\n            <p>Lucky Click is a online multiplayer game.</p>\r\n            <p>New player? Register <Link to='/register'>here</Link>.</p>\r\n            <div>\r\n                <h3>Rules for the game</h3>\r\n                <em>\r\n                    Every game starts with user having 20 points.<br></br>\r\n                    Every click costs 1 points.<br></br>\r\n                    Server rewards:<br></br>\r\n                    <ol>\r\n                        <li>Every 10th click 5 points</li>\r\n                        <li>Every 100th click 40 points</li>\r\n                        <li>Every 500th click 250 points</li>\r\n                        <li>Only the highest win is rewarded.</li>\r\n                    </ol>\r\n                    Players get information after click that how many clicks away is the next win.<br></br>\r\n                    Game ends if player has 0 (or less) points.\r\n                </em>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Login = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Please log in to play the Lucky Click.</h2>\r\n            <Row>\r\n                <Col>\r\n                    <Form onSubmit={props.handleLogin}>\r\n                        <Form.Group>\r\n                            <Form.Label>Username: </Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                name='username'\r\n                                value={props.username}\r\n                                onChange={props.handleUsernameChange}\r\n                            />\r\n                            <Form.Label>Password: </Form.Label>\r\n                            <Form.Control\r\n                                type='password'\r\n                                name='password'\r\n                                value={props.password}\r\n                                onChange={props.handlePasswordChange}\r\n                            />\r\n                            <Button className='button' variant='dark' type='submit'>\r\n                                login\r\n                            </Button>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Col>\r\n                <Col></Col>\r\n            </Row>\r\n            <p> You can also register new player <Link to='/register'>here</Link></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react'\r\nimport { Button, Row, Col } from 'react-bootstrap'\r\n\r\nconst Game = (props) => {\r\n\r\n    if(props.user.points < 1) {\r\n        return (\r\n            <div>\r\n                <h2>Game Over!</h2>\r\n                <Button className='button' variant='info' onClick={props.handleNewGame}>New Game</Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col>\r\n                    <div className='gamebox'>\r\n                        <p className='gameboxtitle'>Lucky Click</p>\r\n                        <p className='gameboxplayer'>{props.user.username}</p>\r\n                        <p>Points: {props.user.points}</p>\r\n                        <p>Last result: {props.gameMsg}</p>\r\n                        <p>Clicks to next win: {props.clicksToWin}</p>\r\n                        <Button className='button' variant='dark' onClick={props.handleGameClick}>Lucky Click</Button>\r\n                    </div>\r\n                </Col>\r\n                <Col></Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","import React from 'react'\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Menubar = (props) => {\r\n    return(\r\n        <div className='menubar'>\r\n            <Navbar collapseOnSelect expand='md' bg='dark' variant='dark'>\r\n                <Navbar.Toggle aira-controls='responsive-navbar-nav' />\r\n                <Navbar.Collapse id='responsive-navbar-nav'>\r\n                    <Nav className='mr-auto'>\r\n                        <Nav.Link href='#' as='span'>\r\n                            <Link className='menulink' to='/'>Home</Link>\r\n                        </Nav.Link>\r\n                        <Nav.Link href='#' as='span'>\r\n                            <Link className='menulink' to='/game'>Game</Link>\r\n                        </Nav.Link>\r\n                        <Nav.Link href='#' as='span'>\r\n                            {props.user\r\n                                ? <Link className='menulink' to='/logout'>Logout</Link> :\r\n                                <Link className='menulink' to='/login'>Login</Link>\r\n                            }\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menubar","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if(message === null || message === '') {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='message'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\n\r\nconst NewUserForm = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Register new Player</h2>\r\n            <Row>\r\n                <Col>\r\n                    <Form onSubmit={props.handleNewUser}>\r\n                        <Form.Group>\r\n                            <Form.Label>Username: </Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                name='username'\r\n                                value={props.newUsername}\r\n                                onChange={props.handleNewUsernameChange}\r\n                            />\r\n                            <Form.Label>Password: </Form.Label>\r\n                            <Form.Control\r\n                                type='password'\r\n                                name='password'\r\n                                value={props.newPassword}\r\n                                onChange={props.handleNewPasswordChange}\r\n                            />\r\n                            <Button className='button' variant='dark' type='submit'>\r\n                                Register\r\n                            </Button>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Col>\r\n                <Col></Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewUserForm","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst Logout = (props) => {\r\n    props.handleLogout()\r\n    return (\r\n        <Redirect to='/' />\r\n    )\r\n}\r\n\r\nexport default Logout","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n    const res = await axios.post(baseUrl, credentials)\r\n    return res.data\r\n}\r\n\r\nexport default { login }","import axios from 'axios'\r\nconst baseUrl = '/api/users'\r\n\r\nlet config = null\r\n\r\nconst setToken = newToken => {\r\n    config = { headers: { Authorization: `bearer ${newToken}` } }\r\n}\r\n\r\nconst getClickResult = async id => {\r\n    const res = await axios.get(`${baseUrl}/click/${id}`, config)\r\n    return res.data\r\n}\r\n\r\nconst startNewGame = async id => {\r\n    const res = await axios.get(`${baseUrl}/newgame/${id}`, config)\r\n    return res.data\r\n}\r\n\r\nconst getGameStatus = async id => {\r\n    const res = await axios.get(`${baseUrl}/gamestatus/${id}`, config)\r\n    return res.data\r\n}\r\n\r\nexport default { getClickResult, startNewGame, setToken, getGameStatus }","import axios from 'axios'\r\nconst baseUrl = '/api/users'\r\n\r\nconst newUser = async credentials => {\r\n    const res = await axios.post(baseUrl, credentials)\r\n    return res.data\r\n}\r\n\r\nexport default { newUser }","import React, { useState, useEffect } from 'react'\r\nimport Home from './Components/Home'\r\nimport Login from './Components/Login'\r\nimport Game from './Components/Game'\r\nimport Menu from './Components/Menubar'\r\nimport Notification from './Components/Notification'\r\nimport NewUserForm from './Components/NewUserForm'\r\nimport Logout from './Components/Logout'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route, Redirect\r\n} from 'react-router-dom'\r\nimport loginService from './Services/login'\r\nimport gameService from './Services/game'\r\nimport userService from './Services/user'\r\n\r\n\r\nconst App = () => {\r\n    const [user, setUser] = useState(null)\r\n    const [clicksToWin, setClicksToWin] = useState('')\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [gameMsg, setGameMsg] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n    const [newUsername, setNewUsername] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n\r\n    useEffect(() => {\r\n        const loggedUserJSON = window.localStorage.getItem('loggedUser')\r\n        if(loggedUserJSON) {\r\n            const fetchData = async (loggedUserJSON) => {\r\n                const user = JSON.parse(loggedUserJSON)\r\n                gameService.setToken(user.token)\r\n                const gameStatus = await gameService.getGameStatus(user.id)\r\n                user.points = gameStatus.points\r\n                setUser(user)\r\n                setClicksToWin(gameStatus.clicksToWin)\r\n            }\r\n            fetchData(loggedUserJSON)\r\n        }\r\n    }, [])\r\n\r\n    const handleLogin = async (event) => {\r\n        event.preventDefault()\r\n        try {\r\n            const user = await loginService.login({ username, password })\r\n            window.localStorage.setItem('loggedUser', JSON.stringify(user))\r\n            gameService.setToken(user.token)\r\n            setUser(user)\r\n            setUsername('')\r\n            setPassword('')\r\n            setUpNotification(`Logged in as ${user.username}`)\r\n        } catch (error) {\r\n            setUpNotification('Login failed.')\r\n            setPassword('')\r\n        }\r\n    }\r\n\r\n    const handleGameClick = async (event) => {\r\n        event.preventDefault()\r\n        const response = await gameService.getClickResult(user.id)\r\n\r\n        setUser(response.updatedPlayer)\r\n        setClicksToWin(response.clicksToWin)\r\n        setGameMsg(response.gameMessage)\r\n    }\r\n\r\n    const handleNewGame = async (event) => {\r\n        event.preventDefault()\r\n        const response = await gameService.startNewGame(user.id)\r\n\r\n        setUser(response.updatedPlayer)\r\n        setClicksToWin(response.clicksToWin)\r\n        setGameMsg(response.gameMessage)\r\n    }\r\n\r\n    const handleNewUser = async (event) => {\r\n        event.preventDefault()\r\n        try {\r\n            const newUser = await userService.newUser({ username:newUsername, password:newPassword })\r\n\r\n            setUpNotification(`${newUser.username} created!`)\r\n            setNewUsername('')\r\n            setNewPassword('')\r\n        } catch(error) {\r\n            setUpNotification('New user registration failed.')\r\n        }\r\n    }\r\n\r\n    const handleUsernameChange = (event) => {\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    const handlePasswordChange = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const handleNewUsernameChange = (event) => {\r\n        setNewUsername(event.target.value)\r\n    }\r\n\r\n    const handleNewPasswordChange = (event) => {\r\n        setNewPassword(event.target.value)\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        window.localStorage.clear()\r\n        setUser(null)\r\n        setUpNotification('Logged out')\r\n    }\r\n\r\n    const setUpNotification = (message) => {\r\n        setMessage(message)\r\n        setTimeout(() => {\r\n            setMessage(null)\r\n        }, 5000)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <Router>\r\n                <div>\r\n                    <div>\r\n                        <Menu user={user} />\r\n                        <Notification message={message} />\r\n                    </div>\r\n                    <Route exact path = '/' render={() => <Home />} />\r\n                    <Route exact path = '/login' render={() =>\r\n                        <Login handleLogin={handleLogin}\r\n                            username={username}\r\n                            password={password}\r\n                            handleUsernameChange={handleUsernameChange}\r\n                            handlePasswordChange={handlePasswordChange}\r\n                        />} />\r\n                    <Route path='/game' render={() => user ?\r\n                        <Game handleGameClick={handleGameClick}\r\n                            user={user}\r\n                            handleNewGame={handleNewGame}\r\n                            clicksToWin={clicksToWin}\r\n                            gameMsg={gameMsg}\r\n                        /> :\r\n                        <Redirect to='/login' />} />\r\n                    <Route exact path = '/register' render={() =>\r\n                        <NewUserForm handleNewUser={handleNewUser}\r\n                            newUsername={newUsername}\r\n                            newPassword={newPassword}\r\n                            handleNewUsernameChange={handleNewUsernameChange}\r\n                            handleNewPasswordChange={handleNewPasswordChange}\r\n                        />} />\r\n                    <Route path = '/logout' render={() =>\r\n                        <Logout handleLogout={handleLogout}\r\n                        />} />\r\n                </div>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}